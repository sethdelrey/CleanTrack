// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqueakyClean.Data;

namespace SqueakyClean.Migrations
{
    [DbContext(typeof(AdminContext))]
    [Migration("20201214020025_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SqueakyClean.Data.AdminContext+CleaningSession", b =>
                {
                    b.Property<int>("CleaningSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBigMop")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CleaningSessionId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            CleaningSessionId = 1,
                            EndTime = new DateTime(2020, 11, 20, 6, 35, 15, 0, DateTimeKind.Unspecified),
                            IsBigMop = false,
                            StartTime = new DateTime(2020, 11, 27, 5, 13, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningSessionId = 2,
                            EndTime = new DateTime(2020, 11, 20, 7, 45, 15, 0, DateTimeKind.Unspecified),
                            IsBigMop = true,
                            StartTime = new DateTime(2020, 11, 20, 5, 13, 30, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SqueakyClean.Data.AdminContext+CleaningTask", b =>
                {
                    b.Property<int>("CleaningTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInDoubleClean")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CleaningTaskId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            CleaningTaskId = 1,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = true,
                            Name = "Take Out Trash",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 2,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = true,
                            Name = "Dust Mop",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 3,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = true,
                            Name = "Vacuum",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 4,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = true,
                            Name = "Mop",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 5,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = false,
                            Name = "Clean Kitchens",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 6,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = false,
                            Name = "Clean Bathrooms",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 7,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = false,
                            Name = "Dust",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 8,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = false,
                            Name = "Wash Dishes",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CleaningTaskId = 9,
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            IsInDoubleClean = true,
                            Name = "Clean Windows",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SqueakyClean.Data.AdminContext+SessionTask", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("SessionId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("SessionTasks");

                    b.HasData(
                        new
                        {
                            SessionId = 1,
                            TaskId = 1
                        },
                        new
                        {
                            SessionId = 1,
                            TaskId = 2
                        },
                        new
                        {
                            SessionId = 1,
                            TaskId = 3
                        },
                        new
                        {
                            SessionId = 1,
                            TaskId = 4
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 1
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 2
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 3
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 4
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 5
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 6
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 7
                        },
                        new
                        {
                            SessionId = 2,
                            TaskId = 8
                        });
                });

            modelBuilder.Entity("SqueakyClean.Data.AdminContext+SessionTask", b =>
                {
                    b.HasOne("SqueakyClean.Data.AdminContext+CleaningSession", "Session")
                        .WithMany("SessionTasks")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SqueakyClean.Data.AdminContext+CleaningTask", "Task")
                        .WithMany("SessionTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
